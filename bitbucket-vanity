#!/usr/bin/env python3

# Copyright © 2013-2016 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import concurrent.futures
import http.client
import json
import operator
import urllib.request

user_agent = 'bitbucket-vanity (https://bitbucket.org/jwilk/bitbucket-vanity)'
max_workers = 8

class Dumper(object):

    def get(self, url):
        request = urllib.request.Request(url, headers={'User-Agent': user_agent})
        with urllib.request.urlopen(request, cadefault=True) as fp:
            data = fp.read()
        data = data.decode('UTF-8')
        return json.loads(data)

    def async_get(self, urls):
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            for response in executor.map(self.get, urls):
                yield response

    def dump_followers(self, user):
        print('followers:')
        url = 'https://bitbucket.org/api/1.0/users/{user}/followers'.format(user=user)
        data = self.get(url)
        followers = data['followers']
        followers = sorted(followers, key=operator.itemgetter('username'))
        for follower in followers:
            name = '{display_name} <{username}>'.format(**follower)
            print('-', name)
        print()

    def dump_repositories(self, user):
        print('repositories:')
        print()
        url = 'https://bitbucket.org/api/1.0/users/{user}'.format(user=user)
        data = self.get(url)
        repos = data['repositories']
        repos = sorted(repos, key=operator.itemgetter('name'))
        repos_followers = self.async_get(
            'https://bitbucket.org/api/{ident}/followers'.format(ident=ident)
            for repo in repos
            for ident in {repo['resource_uri'].lstrip('/')}
        )
        for repo, followers in zip(repos, repos_followers):
            followers = [
                fw for fw in followers['followers']
                if fw['username'] != user
            ]
            if not followers:
                continue
            followers = sorted(followers, key=operator.itemgetter('username'))
            print('  {repo}:'.format(repo=repo['name']))
            for follower in followers:
                name = '{display_name} <{username}>'.format(**follower)
                print('  -', name)
            print()

    def dump(self, user):
        self.dump_followers(user)
        self.dump_repositories(user)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--debug', action='store_true')
    ap.add_argument('user', metavar='<user>')
    options = ap.parse_args()
    if options.debug:
        http.client.HTTPConnection.debuglevel = 1
    dumper = Dumper()
    dumper.dump(options.user)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
